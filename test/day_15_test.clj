(ns day-15-test
  (:require [clojure.test :refer :all]
            [day-15 :refer [adjs djikstra part-1]]))

(deftest test-djikstra
  (is (=
    {
      [0 0] [0 nil]
      [0 1] [1 [0 0]]
      [1 0] [1 [0 0]]
      [1 1] [2 [0 1]]}
    (djikstra
      [0 0]
      {
        [0 0] [[0 1] [1 0]]
        [0 1] [[0 0] [1 1]]
        [1 0] [[0 0] [1 1]]
        [1 1] [[0 1] [1 0]]})))
  (with-open [rdr (clojure.java.io/reader "test/input/15f.txt")]
    (let [lines (vec (line-seq rdr))]
      (is (=
        {
          [1 1] [0 nil]
          [1 2] [1 [1 1]]
          [1 3] [2 [1 2]]
          [1 4] [3 [1 3]]
          [1 5] [4 [1 4]]
          [1 6] [5 [1 5]]
          [1 7] [6 [1 6]]
          [2 1] [1 [1 1]]
          [2 3] [3 [1 3]]
          [2 5] [5 [1 5]]
          [2 6] [6 [1 6]]
          [2 7] [7 [1 7]]
          [3 1] [2 [2 1]]
          [3 2] [3 [3 1]]
          [3 5] [6 [2 5]]
          [3 6] [7 [2 6]]
          [4 1] [3 [3 1]]
          [4 2] [4 [3 2]]
          [4 3] [5 [4 2]]
          [4 6] [8 [3 6]]
          [4 7] [9 [4 6]]
          [5 1] [4 [4 1]]
          [5 2] [5 [4 2]]
          [5 3] [6 [4 3]]
          [5 5] [10 [5 6]]
          [5 6] [9 [4 6]]
          [5 7] [10 [4 7]]
          [6 1] [5 [5 1]]
          [6 3] [7 [5 3]]
          [6 4] [8 [6 3]]
          [6 5] [9 [6 4]]
          [6 7] [11 [5 7]]
          [7 1] [6 [6 1]]
          [7 2] [7 [7 1]]
          [7 3] [8 [6 3]]
          [7 4] [9 [6 4]]
          [7 5] [10 [6 5]]
          [7 7] [12 [6 7]]}
        (djikstra
          [1 1]
          (fn [pos] (filter #(= \. (get-in lines %)) (adjs pos))))))))
  )

(deftest test-part-1
  (are [q a] (= a (with-open [rdr (clojure.java.io/reader (format "test/input/15%s.txt" q))] (part-1 (line-seq rdr))))
    "a" 27730
    "b" 36334
    "c" 39514
    "d" 27755
    "e" 28944
    "f" 18740
    "" 189000
    )
)
